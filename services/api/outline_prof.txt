PROF is a service that enables appending additional transactions to a block received by the relay. 
For this purpose, the block is first sent to the "bundle-merger", which enriches the block and returns the enriched block header. 
The bundle-merger is a separate process that is connected via gRPC. Below you can also find the gRPC API, with the expected response format and streaming behavior.

During the handleGetHeader process, the relay should attempt to augment the winning block with the PROF bundle.
It should retrieve the latest PROF bundle for the slot via gRPC. The payload for the block is NOT provided by the bundle-merger at this point. 
Theoretically, the relay afterwards receives a signed header by the proposer and is then able to request the payload from the bundle-merger - to keep the order flow at the bundle-merger private. 
For now, this should not be implemented.

Actually you should decide: Would it be better to implement PROF in the handleSubmitNewBlock function to obtain an updated block whenever a new block is submitted?

2. Your Task:
- Implement PROF in the handleSubmitNewBlock function to obtain an updated block whenever a new block is submitted.
- The bundle-merger is already running and can be connected to.
- The gRPC API is already given below.
- Find a suitable solution that enables passing the URL/Port of the bundle-merger to the relay that adheres to the architecture of the relay.

Figure out what the best place is to store the code for PROF. You'll also need function to convert blocks etc. to the protobuf format. Those are also given below.

Additional Info: 
- Files below are always announced with "The following file is ..."
- The URL is https://github.com/bloXroute-Labs/relay-grpc/ where the branch is mock_enrich_grpc
    - e.g. https://github.com/bloXroute-Labs/relay-grpc/blob/mock_enrich_grpc/utils.go

------------------------------------------------------------------------------------------------

The following file is utils.go:


package relay_grpc

import (
	"fmt"
	"math/big"

	v1 "github.com/attestantio/go-builder-client/api/v1"
	builderSpec "github.com/attestantio/go-builder-client/spec"
	consensusspec "github.com/attestantio/go-eth2-client/spec"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	"github.com/holiman/uint256"
	"github.com/pkg/errors"
)

var ErrInvalidVersion = errors.New("invalid version")

// Based on the version, delegate to the correct RequestToProtoRequest
func VersionedRequestToProtoRequest(block *builderSpec.VersionedSubmitBlockRequest) (*SubmitBlockRequest, error) {
	switch block.Version {
	case consensusspec.DataVersionCapella:
		return CapellaRequestToProtoRequest(block.Capella), nil
	case consensusspec.DataVersionDeneb:
		return DenebRequestToProtoRequest(block.Deneb), nil
	default:
		return nil, errors.Wrap(ErrInvalidVersion, fmt.Sprintf("%s is not supported", block.Version))
	}
}

// Based on the version, delegate to the correct RequestToProtoRequestWithShortIDs
func VersionedRequestToProtoRequestWithShortIDs(block *builderSpec.VersionedSubmitBlockRequest, compressTxs []*CompressTx) (*SubmitBlockRequest, error) {
	switch block.Version {
	case consensusspec.DataVersionCapella:
		return CapellaRequestToProtoRequestWithShortIDs(block.Capella, compressTxs), nil
	case consensusspec.DataVersionDeneb:
		return DenebRequestToProtoRequestWithShortIDs(block.Deneb, compressTxs), nil
	default:
		return nil, errors.Wrap(ErrInvalidVersion, fmt.Sprintf("%s is not supported", block.Version))
	}
}

// Based on the version, delegate to the correct ProtoRequestToVersionedRequest
func ProtoRequestToVersionedRequest(block *SubmitBlockRequest) (*builderSpec.VersionedSubmitBlockRequest, error) {
	switch consensusspec.DataVersion(block.Version) {
	case consensusspec.DataVersionCapella:
		blockRequest, err := ProtoRequestToCapellaRequest(block)
		if err != nil {
			return nil, err
		}
		return &builderSpec.VersionedSubmitBlockRequest{
			Version: consensusspec.DataVersionCapella,
			Capella: blockRequest,
		}, nil
	case consensusspec.DataVersionDeneb:
		blockRequest, err := ProtoRequestToDenebRequest(block)
		if err != nil {
			return nil, err
		}
		return &builderSpec.VersionedSubmitBlockRequest{
			Version: consensusspec.DataVersionDeneb,
			Deneb:   blockRequest,
		}, nil
	default:
		return nil, errors.Wrap(ErrInvalidVersion, fmt.Sprintf("%s is not supported", consensusspec.DataVersion(block.Version)))
	}
}

type BidTraceExecutionPayload struct {
	Timestamp uint64
}
type BidtracePayload struct {
	Message          *v1.BidTrace
	ExecutionPayload *BidTraceExecutionPayload
	Signature        phase0.BLSSignature
}

func ProtoRequestToBidtracePayload(block *SubmitBlockRequest) (*BidtracePayload, error) {
	blockRequest, err := ProtoRequestToDenebBidtracePayload(block)
	if err != nil {
		return nil, err
	}
	return blockRequest, nil
}

// b20 converts a byte slice to a [20]byte.
func b20(b []byte) [20]byte {
	out := [20]byte{}
	copy(out[:], b)
	return out
}

// b32 converts a byte slice to a [32]byte.
func b32(b []byte) [32]byte {
	out := [32]byte{}
	copy(out[:], b)
	return out
}

// b48 converts a byte slice to a [48]byte.
func b48(b []byte) [48]byte {
	out := [48]byte{}
	copy(out[:], b)
	return out
}

// b96 converts a byte slice to a [96]byte.
func b96(b []byte) [96]byte {
	out := [96]byte{}
	copy(out[:], b)
	return out
}

// b256 converts a byte slice to a [256]byte.
func b256(b []byte) [256]byte {
	out := [256]byte{}
	copy(out[:], b)
	return out
}

// uint256ToIntToByteSlice converts a *uint256.Int to a byte slice.
func uint256ToIntToByteSlice(u *uint256.Int) []byte {
	if u == nil {
		return nil
	}
	// Convert the uint256.Int to a byte slice.
	// The Bytes method returns the absolute value as a big-endian byte slice.
	return u.Bytes()
}

// byteSliceToUint256Int converts a byte slice to a *uint256.Int.
func byteSliceToUint256Int(b []byte) *uint256.Int {
	u256, _ := uint256.FromBig(new(big.Int).SetBytes(b))
	return u256
}

The following file is blxr-mev_grpc.pb.go:


// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: blxr-mev.proto

package relay_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Relay_SubmitBlock_FullMethodName              = "/Relay/SubmitBlock"
	Relay_RegisterValidator_FullMethodName        = "/Relay/RegisterValidator"
	Relay_GetHeader_FullMethodName                = "/Relay/GetHeader"
	Relay_GetPayload_FullMethodName               = "/Relay/GetPayload"
	Relay_StreamHeader_FullMethodName             = "/Relay/StreamHeader"
	Relay_GetValidatorRegistration_FullMethodName = "/Relay/GetValidatorRegistration"
	Relay_PreFetchGetPayload_FullMethodName       = "/Relay/PreFetchGetPayload"
)

// RelayClient is the client API for Relay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayClient interface {
	SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error)
	RegisterValidator(ctx context.Context, in *RegisterValidatorRequest, opts ...grpc.CallOption) (*RegisterValidatorResponse, error)
	GetHeader(ctx context.Context, in *GetHeaderRequest, opts ...grpc.CallOption) (*GetHeaderResponse, error)
	GetPayload(ctx context.Context, in *GetPayloadRequest, opts ...grpc.CallOption) (*GetPayloadResponse, error)
	StreamHeader(ctx context.Context, in *StreamHeaderRequest, opts ...grpc.CallOption) (Relay_StreamHeaderClient, error)
	GetValidatorRegistration(ctx context.Context, in *GetValidatorRegistrationRequest, opts ...grpc.CallOption) (*GetValidatorRegistrationResponse, error)
	PreFetchGetPayload(ctx context.Context, in *PreFetchGetPayloadRequest, opts ...grpc.CallOption) (*PreFetchGetPayloadResponse, error)
}

type relayClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayClient(cc grpc.ClientConnInterface) RelayClient {
	return &relayClient{cc}
}

func (c *relayClient) SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error) {
	out := new(SubmitBlockResponse)
	err := c.cc.Invoke(ctx, Relay_SubmitBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) RegisterValidator(ctx context.Context, in *RegisterValidatorRequest, opts ...grpc.CallOption) (*RegisterValidatorResponse, error) {
	out := new(RegisterValidatorResponse)
	err := c.cc.Invoke(ctx, Relay_RegisterValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) GetHeader(ctx context.Context, in *GetHeaderRequest, opts ...grpc.CallOption) (*GetHeaderResponse, error) {
	out := new(GetHeaderResponse)
	err := c.cc.Invoke(ctx, Relay_GetHeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) GetPayload(ctx context.Context, in *GetPayloadRequest, opts ...grpc.CallOption) (*GetPayloadResponse, error) {
	out := new(GetPayloadResponse)
	err := c.cc.Invoke(ctx, Relay_GetPayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) StreamHeader(ctx context.Context, in *StreamHeaderRequest, opts ...grpc.CallOption) (Relay_StreamHeaderClient, error) {
	stream, err := c.cc.NewStream(ctx, &Relay_ServiceDesc.Streams[0], Relay_StreamHeader_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &relayStreamHeaderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Relay_StreamHeaderClient interface {
	Recv() (*StreamHeaderResponse, error)
	grpc.ClientStream
}

type relayStreamHeaderClient struct {
	grpc.ClientStream
}

func (x *relayStreamHeaderClient) Recv() (*StreamHeaderResponse, error) {
	m := new(StreamHeaderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *relayClient) GetValidatorRegistration(ctx context.Context, in *GetValidatorRegistrationRequest, opts ...grpc.CallOption) (*GetValidatorRegistrationResponse, error) {
	out := new(GetValidatorRegistrationResponse)
	err := c.cc.Invoke(ctx, Relay_GetValidatorRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) PreFetchGetPayload(ctx context.Context, in *PreFetchGetPayloadRequest, opts ...grpc.CallOption) (*PreFetchGetPayloadResponse, error) {
	out := new(PreFetchGetPayloadResponse)
	err := c.cc.Invoke(ctx, Relay_PreFetchGetPayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayServer is the server API for Relay service.
// All implementations must embed UnimplementedRelayServer
// for forward compatibility
type RelayServer interface {
	SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error)
	RegisterValidator(context.Context, *RegisterValidatorRequest) (*RegisterValidatorResponse, error)
	GetHeader(context.Context, *GetHeaderRequest) (*GetHeaderResponse, error)
	GetPayload(context.Context, *GetPayloadRequest) (*GetPayloadResponse, error)
	StreamHeader(*StreamHeaderRequest, Relay_StreamHeaderServer) error
	GetValidatorRegistration(context.Context, *GetValidatorRegistrationRequest) (*GetValidatorRegistrationResponse, error)
	PreFetchGetPayload(context.Context, *PreFetchGetPayloadRequest) (*PreFetchGetPayloadResponse, error)
	mustEmbedUnimplementedRelayServer()
}

// UnimplementedRelayServer must be embedded to have forward compatible implementations.
type UnimplementedRelayServer struct {
}

func (UnimplementedRelayServer) SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (UnimplementedRelayServer) RegisterValidator(context.Context, *RegisterValidatorRequest) (*RegisterValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterValidator not implemented")
}
func (UnimplementedRelayServer) GetHeader(context.Context, *GetHeaderRequest) (*GetHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeader not implemented")
}
func (UnimplementedRelayServer) GetPayload(context.Context, *GetPayloadRequest) (*GetPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayload not implemented")
}
func (UnimplementedRelayServer) StreamHeader(*StreamHeaderRequest, Relay_StreamHeaderServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamHeader not implemented")
}
func (UnimplementedRelayServer) GetValidatorRegistration(context.Context, *GetValidatorRegistrationRequest) (*GetValidatorRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorRegistration not implemented")
}
func (UnimplementedRelayServer) PreFetchGetPayload(context.Context, *PreFetchGetPayloadRequest) (*PreFetchGetPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreFetchGetPayload not implemented")
}
func (UnimplementedRelayServer) mustEmbedUnimplementedRelayServer() {}

// UnsafeRelayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayServer will
// result in compilation errors.
type UnsafeRelayServer interface {
	mustEmbedUnimplementedRelayServer()
}

func RegisterRelayServer(s grpc.ServiceRegistrar, srv RelayServer) {
	s.RegisterService(&Relay_ServiceDesc, srv)
}

func _Relay_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relay_SubmitBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).SubmitBlock(ctx, req.(*SubmitBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_RegisterValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).RegisterValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relay_RegisterValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).RegisterValidator(ctx, req.(*RegisterValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_GetHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).GetHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relay_GetHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).GetHeader(ctx, req.(*GetHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_GetPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).GetPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relay_GetPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).GetPayload(ctx, req.(*GetPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_StreamHeader_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamHeaderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RelayServer).StreamHeader(m, &relayStreamHeaderServer{stream})
}

type Relay_StreamHeaderServer interface {
	Send(*StreamHeaderResponse) error
	grpc.ServerStream
}

type relayStreamHeaderServer struct {
	grpc.ServerStream
}

func (x *relayStreamHeaderServer) Send(m *StreamHeaderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Relay_GetValidatorRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).GetValidatorRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relay_GetValidatorRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).GetValidatorRegistration(ctx, req.(*GetValidatorRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_PreFetchGetPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreFetchGetPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).PreFetchGetPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relay_PreFetchGetPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).PreFetchGetPayload(ctx, req.(*PreFetchGetPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Relay_ServiceDesc is the grpc.ServiceDesc for Relay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Relay",
	HandlerType: (*RelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlock",
			Handler:    _Relay_SubmitBlock_Handler,
		},
		{
			MethodName: "RegisterValidator",
			Handler:    _Relay_RegisterValidator_Handler,
		},
		{
			MethodName: "GetHeader",
			Handler:    _Relay_GetHeader_Handler,
		},
		{
			MethodName: "GetPayload",
			Handler:    _Relay_GetPayload_Handler,
		},
		{
			MethodName: "GetValidatorRegistration",
			Handler:    _Relay_GetValidatorRegistration_Handler,
		},
		{
			MethodName: "PreFetchGetPayload",
			Handler:    _Relay_PreFetchGetPayload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHeader",
			Handler:       _Relay_StreamHeader_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blxr-mev.proto",
}

const (
	Enricher_EnrichBlockStream_FullMethodName  = "/Enricher/EnrichBlockStream"
	Enricher_GetEnrichedPayload_FullMethodName = "/Enricher/GetEnrichedPayload"
)

// EnricherClient is the client API for Enricher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnricherClient interface {
	EnrichBlockStream(ctx context.Context, opts ...grpc.CallOption) (Enricher_EnrichBlockStreamClient, error)
	GetEnrichedPayload(ctx context.Context, in *GetEnrichedPayloadRequest, opts ...grpc.CallOption) (*ExecutionPayloadAndBlobsBundle, error)
}

type enricherClient struct {
	cc grpc.ClientConnInterface
}

func NewEnricherClient(cc grpc.ClientConnInterface) EnricherClient {
	return &enricherClient{cc}
}

func (c *enricherClient) EnrichBlockStream(ctx context.Context, opts ...grpc.CallOption) (Enricher_EnrichBlockStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Enricher_ServiceDesc.Streams[0], Enricher_EnrichBlockStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &enricherEnrichBlockStreamClient{stream}
	return x, nil
}

type Enricher_EnrichBlockStreamClient interface {
	Send(*EnrichBlockRequest) error
	Recv() (*EnrichBlockResponse, error)
	grpc.ClientStream
}

type enricherEnrichBlockStreamClient struct {
	grpc.ClientStream
}

func (x *enricherEnrichBlockStreamClient) Send(m *EnrichBlockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *enricherEnrichBlockStreamClient) Recv() (*EnrichBlockResponse, error) {
	m := new(EnrichBlockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *enricherClient) GetEnrichedPayload(ctx context.Context, in *GetEnrichedPayloadRequest, opts ...grpc.CallOption) (*ExecutionPayloadAndBlobsBundle, error) {
	out := new(ExecutionPayloadAndBlobsBundle)
	err := c.cc.Invoke(ctx, Enricher_GetEnrichedPayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnricherServer is the server API for Enricher service.
// All implementations must embed UnimplementedEnricherServer
// for forward compatibility
type EnricherServer interface {
	EnrichBlockStream(Enricher_EnrichBlockStreamServer) error
	GetEnrichedPayload(context.Context, *GetEnrichedPayloadRequest) (*ExecutionPayloadAndBlobsBundle, error)
	mustEmbedUnimplementedEnricherServer()
}

// UnimplementedEnricherServer must be embedded to have forward compatible implementations.
type UnimplementedEnricherServer struct {
}

func (UnimplementedEnricherServer) EnrichBlockStream(Enricher_EnrichBlockStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EnrichBlockStream not implemented")
}
func (UnimplementedEnricherServer) GetEnrichedPayload(context.Context, *GetEnrichedPayloadRequest) (*ExecutionPayloadAndBlobsBundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrichedPayload not implemented")
}
func (UnimplementedEnricherServer) mustEmbedUnimplementedEnricherServer() {}

// UnsafeEnricherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnricherServer will
// result in compilation errors.
type UnsafeEnricherServer interface {
	mustEmbedUnimplementedEnricherServer()
}

func RegisterEnricherServer(s grpc.ServiceRegistrar, srv EnricherServer) {
	s.RegisterService(&Enricher_ServiceDesc, srv)
}

func _Enricher_EnrichBlockStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EnricherServer).EnrichBlockStream(&enricherEnrichBlockStreamServer{stream})
}

type Enricher_EnrichBlockStreamServer interface {
	Send(*EnrichBlockResponse) error
	Recv() (*EnrichBlockRequest, error)
	grpc.ServerStream
}

type enricherEnrichBlockStreamServer struct {
	grpc.ServerStream
}

func (x *enricherEnrichBlockStreamServer) Send(m *EnrichBlockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *enricherEnrichBlockStreamServer) Recv() (*EnrichBlockRequest, error) {
	m := new(EnrichBlockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Enricher_GetEnrichedPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnrichedPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnricherServer).GetEnrichedPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Enricher_GetEnrichedPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnricherServer).GetEnrichedPayload(ctx, req.(*GetEnrichedPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Enricher_ServiceDesc is the grpc.ServiceDesc for Enricher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Enricher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Enricher",
	HandlerType: (*EnricherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnrichedPayload",
			Handler:    _Enricher_GetEnrichedPayload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnrichBlockStream",
			Handler:       _Enricher_EnrichBlockStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "blxr-mev.proto",
}


blxr-mev.proto is the following file:


syntax = "proto3";

option go_package = "github.com/bloXoute-Labs/relay-grpc";
import "google/protobuf/timestamp.proto";

service Relay {
  rpc SubmitBlock(SubmitBlockRequest) returns (SubmitBlockResponse) {}
  rpc RegisterValidator(RegisterValidatorRequest) returns (RegisterValidatorResponse) {}
  rpc GetHeader(GetHeaderRequest) returns (GetHeaderResponse) {}
  rpc GetPayload(GetPayloadRequest) returns (GetPayloadResponse) {}
  rpc StreamHeader(StreamHeaderRequest) returns (stream StreamHeaderResponse) {}
  rpc GetValidatorRegistration(GetValidatorRegistrationRequest) returns (GetValidatorRegistrationResponse) {}
  rpc PreFetchGetPayload(PreFetchGetPayloadRequest) returns (PreFetchGetPayloadResponse) {}
}

// Registration
message RegisterValidatorRequest{
  string req_id = 1;
  bytes payload = 2;
  string client_ip  = 3;
  string node_id = 4;
  string version = 5;
  // validators are registering via relay proxy is trusted so no need auth header for now
  string auth_header = 6;
  string secret_token = 7;
  google.protobuf.Timestamp received_at = 8;
  string compliance_list = 9;
  bool proposer_mev_protect = 10;
  bool skip_optimism = 11;
}

message RegisterValidatorResponse{
  uint32 code = 1;
  int32 http_status_code = 2; // added for http api compatibility
  string message = 3;
}

message GetValidatorRegistrationRequest{
  string req_id = 1;
  string secret_token = 2;
  string account_id = 3;
}

message GetValidatorRegistrationResponse{
  uint32 code = 1;
  int32 http_status_code = 2;
  string message = 3;
  bytes payload = 4;
}

// GetHeader
message GetHeaderRequest{
  uint64 slot = 1;
  string parent_hash = 2;
  string pubkey = 3;
  string client_ip = 4;
  string version = 5;
}

message GetHeaderResponse{
  string req_id = 1;
  uint32 code = 2;
  int32 http_status_code = 3;// added for http api compatibility
  uint64 slot = 4;
  string parent_hash = 5;
  string pubkey = 6;
  bytes payload = 7;
}

// GetPayload
message GetPayloadRequest{
  string req_id = 1;
  bytes payload = 2;
  string client_ip = 3;
  string version = 4;
  string secret_token = 5;
  google.protobuf.Timestamp received_at = 7;
}

message GetPayloadResponse{
  uint32 code = 1;
  int32 http_status_code = 2;// added for http api compatibility
  string message = 3;
  bytes versioned_execution_payload = 4;
  // below fields not needed but added for logging on the relay proxy
  uint64 slot = 5;
  string parent_hash =6;
  string block_hash =7;
  string pubkey = 8;
  uint64 proposer_index = 9;
  string block_value = 10;
}

// StreamHeader
message StreamHeaderRequest {
  string req_id = 1;
  string node_id = 2;
  string version = 3;
  string secret_token = 4;
}

message StreamHeaderResponse{
  uint64 slot = 1;
  string parent_hash = 2;
  string pubkey = 3;
  bytes payload = 4;
  bytes value = 5; // value field added to avoid unmarshalling payload which contains value
  uint64 head_slot = 6; // head slot added for cleaning up old slot
  string block_hash= 7;
  string builder_pubkey = 8;
  string builder_extra_data = 9;
  google.protobuf.Timestamp send_time = 10;
  bool paid_blxr = 11;
  google.protobuf.Timestamp relay_receive_time = 12;
  string account_id = 13;
}

message PreFetchGetPayloadRequest{
  string req_id = 1;
  string version = 2;
  string secret_token = 3;
  uint64 slot = 4;
  string parent_hash =5;
  string block_hash =6;
  string pubkey = 7;
  string client_ip = 8;
  google.protobuf.Timestamp received_at = 9;
}


message PreFetchGetPayloadResponse{
  uint32 code = 1;
  string message = 2;
  bytes versioned_execution_payload = 3;
}

// SubmitBlock
message SubmitBlockRequest {
  uint64 version = 1;
  BidTrace bidTrace = 2;
  ExecutionPayload executionPayload = 3;
  bytes signature = 4;
  string auth_header = 5;
  uint64 size_before = 6;
  bool get_payload_only = 7;
  BlobsBundle blobs_bundle = 8;
  bool second_value_auction_eligible = 9;
  bool proposer_mev_protect = 10;
  bool skip_optimism = 11;
  bool compliance_list = 12;
}

message SubmitBlockResponse {
  int64 code = 1;
  string message = 2;
}

message BidTrace {
  uint64 Slot = 1;
  bytes ParentHash = 2;
  bytes BlockHash = 3;
  bytes BuilderPubkey = 4;
  bytes ProposerPubkey = 5;
  bytes ProposerFeeRecipient = 6;
  uint64 GasLimit = 7;
  uint64 GasUsed = 8;
  string Value = 9;
  uint64 BlobGasUsed = 10;
  uint64 ExcessBlobGas = 11;
}

message Withdrawal {
  uint64 Index = 1;
  uint64 ValidatorIndex = 2;
  bytes Address = 3;
  uint64 Amount = 4;
}

message BlobsBundle {
  repeated bytes Commitments = 1;
  repeated bytes Proofs = 2;
  repeated bytes Blobs = 3;
}

message ExecutionPayload {
  bytes ParentHash = 1;
  bytes StateRoot = 2;
  bytes ReceiptsRoot = 3;
  bytes LogsBloom = 4;
  bytes PrevRandao = 5;
  bytes ExtraData = 6;
  bytes BaseFeePerGas = 7;
  bytes FeeRecipient = 8;
  bytes BlockHash = 9;
  repeated compressTx Transactions = 10;
  repeated Withdrawal Withdrawals = 11;
  uint64 BlockNumber = 12;
  uint64 GasLimit = 13;
  uint64 Timestamp = 14;
  uint64 GasUsed = 15;
  uint64 BlobGasUsed = 16;
  uint64 ExcessBlobGas = 17;
}
message ExecutionPayloadUncompressed {
  bytes ParentHash = 1;
  bytes StateRoot = 2;
  bytes ReceiptsRoot = 3;
  bytes LogsBloom = 4;
  bytes PrevRandao = 5;
  bytes ExtraData = 6;
  bytes BaseFeePerGas = 7;
  bytes FeeRecipient = 8;
  bytes BlockHash = 9;
  repeated Transaction Transactions = 10;
  repeated Withdrawal Withdrawals = 11;
  uint64 BlockNumber = 12;
  uint64 GasLimit = 13;
  uint64 Timestamp = 14;
  uint64 GasUsed = 15;
  uint64 BlobGasUsed = 16;
  uint64 ExcessBlobGas = 17;
}


message compressTx {
  bytes rawData = 1;
  uint32 shortID = 2;
}

message Transaction {
  bytes rawData = 1;
}

service Enricher {
  rpc EnrichBlockStream(stream EnrichBlockRequest) returns (stream EnrichBlockResponse);
  rpc GetEnrichedPayload(GetEnrichedPayloadRequest) returns (ExecutionPayloadAndBlobsBundle);
}

message EnrichBlockRequest{
  string uuid = 1;
  ExecutionPayloadAndBlobsBundle executionPayloadAndBlobsBundle = 2;
  BidTrace bidTrace = 3;
  bytes parentBeaconRoot = 4;
}

message ExecutionPayloadAndBlobsBundle {
  ExecutionPayloadUncompressed executionPayload = 1;
  BlobsBundle blobsBundle = 2;
}

message EnrichBlockResponse {
  string uuid = 1;
  ExecutionPayloadHeader executionPayloadHeader = 2;
  repeated bytes kzgCommitment = 3;
  uint64 value = 4;
}

message ExecutionPayloadHeader {
  bytes ParentHash = 1;
  bytes StateRoot = 2;
  bytes ReceiptsRoot = 3;
  bytes LogsBloom = 4;
  bytes PrevRandao = 5;
  bytes ExtraData = 6;
  bytes BaseFeePerGas = 7;
  bytes FeeRecipient = 8;
  bytes BlockHash = 9;
  bytes TransactionsRoot = 10;
  bytes WithdrawalsRoot = 11;
  uint64 BlockNumber = 12;
  uint64 GasLimit = 13;
  uint64 Timestamp = 14;
  uint64 GasUsed = 15;
  uint64 BlobGasUsed = 16;
  uint64 ExcessBlobGas = 17;
}

message GetEnrichedPayloadRequest {
	bytes Message = 1;
  bytes Signature = 2;
}




blxr-mev.pb.go is the following file:


// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v5.27.1
// source: blxr-mev.proto

package relay_grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Registration
type RegisterValidatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId    string `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Payload  []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	ClientIp string `protobuf:"bytes,3,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	NodeId   string `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Version  string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// validators are registering via relay proxy is trusted so no need auth header for now
	AuthHeader         string                 `protobuf:"bytes,6,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
	SecretToken        string                 `protobuf:"bytes,7,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
	ReceivedAt         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	ComplianceList     string                 `protobuf:"bytes,9,opt,name=compliance_list,json=complianceList,proto3" json:"compliance_list,omitempty"`
	ProposerMevProtect bool                   `protobuf:"varint,10,opt,name=proposer_mev_protect,json=proposerMevProtect,proto3" json:"proposer_mev_protect,omitempty"`
	SkipOptimism       bool                   `protobuf:"varint,11,opt,name=skip_optimism,json=skipOptimism,proto3" json:"skip_optimism,omitempty"`
}

func (x *RegisterValidatorRequest) Reset() {
	*x = RegisterValidatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterValidatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterValidatorRequest) ProtoMessage() {}

func (x *RegisterValidatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterValidatorRequest.ProtoReflect.Descriptor instead.
func (*RegisterValidatorRequest) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterValidatorRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *RegisterValidatorRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RegisterValidatorRequest) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *RegisterValidatorRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RegisterValidatorRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RegisterValidatorRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

func (x *RegisterValidatorRequest) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

func (x *RegisterValidatorRequest) GetReceivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedAt
	}
	return nil
}

func (x *RegisterValidatorRequest) GetComplianceList() string {
	if x != nil {
		return x.ComplianceList
	}
	return ""
}

func (x *RegisterValidatorRequest) GetProposerMevProtect() bool {
	if x != nil {
		return x.ProposerMevProtect
	}
	return false
}

func (x *RegisterValidatorRequest) GetSkipOptimism() bool {
	if x != nil {
		return x.SkipOptimism
	}
	return false
}

type RegisterValidatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	HttpStatusCode int32  `protobuf:"varint,2,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"` // added for http api compatibility
	Message        string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RegisterValidatorResponse) Reset() {
	*x = RegisterValidatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterValidatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterValidatorResponse) ProtoMessage() {}

func (x *RegisterValidatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterValidatorResponse.ProtoReflect.Descriptor instead.
func (*RegisterValidatorResponse) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterValidatorResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RegisterValidatorResponse) GetHttpStatusCode() int32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *RegisterValidatorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetValidatorRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId       string `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	SecretToken string `protobuf:"bytes,2,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
	AccountId   string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetValidatorRegistrationRequest) Reset() {
	*x = GetValidatorRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorRegistrationRequest) ProtoMessage() {}

func (x *GetValidatorRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorRegistrationRequest.ProtoReflect.Descriptor instead.
func (*GetValidatorRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{2}
}

func (x *GetValidatorRegistrationRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *GetValidatorRegistrationRequest) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

func (x *GetValidatorRegistrationRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetValidatorRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	HttpStatusCode int32  `protobuf:"varint,2,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	Message        string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Payload        []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetValidatorRegistrationResponse) Reset() {
	*x = GetValidatorRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidatorRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidatorRegistrationResponse) ProtoMessage() {}

func (x *GetValidatorRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidatorRegistrationResponse.ProtoReflect.Descriptor instead.
func (*GetValidatorRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{3}
}

func (x *GetValidatorRegistrationResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetValidatorRegistrationResponse) GetHttpStatusCode() int32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *GetValidatorRegistrationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetValidatorRegistrationResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// GetHeader
type GetHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot       uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ParentHash string `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Pubkey     string `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	ClientIp   string `protobuf:"bytes,4,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	Version    string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetHeaderRequest) Reset() {
	*x = GetHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeaderRequest) ProtoMessage() {}

func (x *GetHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetHeaderRequest) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{4}
}

func (x *GetHeaderRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *GetHeaderRequest) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *GetHeaderRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *GetHeaderRequest) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *GetHeaderRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId          string `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Code           uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	HttpStatusCode int32  `protobuf:"varint,3,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"` // added for http api compatibility
	Slot           uint64 `protobuf:"varint,4,opt,name=slot,proto3" json:"slot,omitempty"`
	ParentHash     string `protobuf:"bytes,5,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Pubkey         string `protobuf:"bytes,6,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Payload        []byte `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetHeaderResponse) Reset() {
	*x = GetHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeaderResponse) ProtoMessage() {}

func (x *GetHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetHeaderResponse) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{5}
}

func (x *GetHeaderResponse) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *GetHeaderResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetHeaderResponse) GetHttpStatusCode() int32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *GetHeaderResponse) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *GetHeaderResponse) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *GetHeaderResponse) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *GetHeaderResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// GetPayload
type GetPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId       string                 `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Payload     []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	ClientIp    string                 `protobuf:"bytes,3,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	Version     string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	SecretToken string                 `protobuf:"bytes,5,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
	ReceivedAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
}

func (x *GetPayloadRequest) Reset() {
	*x = GetPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayloadRequest) ProtoMessage() {}

func (x *GetPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayloadRequest.ProtoReflect.Descriptor instead.
func (*GetPayloadRequest) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{6}
}

func (x *GetPayloadRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *GetPayloadRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *GetPayloadRequest) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *GetPayloadRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetPayloadRequest) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

func (x *GetPayloadRequest) GetReceivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedAt
	}
	return nil
}

type GetPayloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	HttpStatusCode            int32  `protobuf:"varint,2,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"` // added for http api compatibility
	Message                   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	VersionedExecutionPayload []byte `protobuf:"bytes,4,opt,name=versioned_execution_payload,json=versionedExecutionPayload,proto3" json:"versioned_execution_payload,omitempty"`
	// below fields not needed but added for logging on the relay proxy
	Slot          uint64 `protobuf:"varint,5,opt,name=slot,proto3" json:"slot,omitempty"`
	ParentHash    string `protobuf:"bytes,6,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	BlockHash     string `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Pubkey        string `protobuf:"bytes,8,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	ProposerIndex uint64 `protobuf:"varint,9,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	BlockValue    string `protobuf:"bytes,10,opt,name=block_value,json=blockValue,proto3" json:"block_value,omitempty"`
}

func (x *GetPayloadResponse) Reset() {
	*x = GetPayloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayloadResponse) ProtoMessage() {}

func (x *GetPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayloadResponse.ProtoReflect.Descriptor instead.
func (*GetPayloadResponse) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{7}
}

func (x *GetPayloadResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPayloadResponse) GetHttpStatusCode() int32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *GetPayloadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPayloadResponse) GetVersionedExecutionPayload() []byte {
	if x != nil {
		return x.VersionedExecutionPayload
	}
	return nil
}

func (x *GetPayloadResponse) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *GetPayloadResponse) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *GetPayloadResponse) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetPayloadResponse) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *GetPayloadResponse) GetProposerIndex() uint64 {
	if x != nil {
		return x.ProposerIndex
	}
	return 0
}

func (x *GetPayloadResponse) GetBlockValue() string {
	if x != nil {
		return x.BlockValue
	}
	return ""
}

// StreamHeader
type StreamHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId       string `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	NodeId      string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	SecretToken string `protobuf:"bytes,4,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
}

func (x *StreamHeaderRequest) Reset() {
	*x = StreamHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamHeaderRequest) ProtoMessage() {}

func (x *StreamHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamHeaderRequest.ProtoReflect.Descriptor instead.
func (*StreamHeaderRequest) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{8}
}

func (x *StreamHeaderRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *StreamHeaderRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *StreamHeaderRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StreamHeaderRequest) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

type StreamHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot             uint64                 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ParentHash       string                 `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Pubkey           string                 `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Payload          []byte                 `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Value            []byte                 `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`                        // value field added to avoid unmarshalling payload which contains value
	HeadSlot         uint64                 `protobuf:"varint,6,opt,name=head_slot,json=headSlot,proto3" json:"head_slot,omitempty"` // head slot added for cleaning up old slot
	BlockHash        string                 `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BuilderPubkey    string                 `protobuf:"bytes,8,opt,name=builder_pubkey,json=builderPubkey,proto3" json:"builder_pubkey,omitempty"`
	BuilderExtraData string                 `protobuf:"bytes,9,opt,name=builder_extra_data,json=builderExtraData,proto3" json:"builder_extra_data,omitempty"`
	SendTime         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	PaidBlxr         bool                   `protobuf:"varint,11,opt,name=paid_blxr,json=paidBlxr,proto3" json:"paid_blxr,omitempty"`
	RelayReceiveTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=relay_receive_time,json=relayReceiveTime,proto3" json:"relay_receive_time,omitempty"`
	AccountId        string                 `protobuf:"bytes,13,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *StreamHeaderResponse) Reset() {
	*x = StreamHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamHeaderResponse) ProtoMessage() {}

func (x *StreamHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamHeaderResponse.ProtoReflect.Descriptor instead.
func (*StreamHeaderResponse) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{9}
}

func (x *StreamHeaderResponse) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *StreamHeaderResponse) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *StreamHeaderResponse) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *StreamHeaderResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *StreamHeaderResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StreamHeaderResponse) GetHeadSlot() uint64 {
	if x != nil {
		return x.HeadSlot
	}
	return 0
}

func (x *StreamHeaderResponse) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *StreamHeaderResponse) GetBuilderPubkey() string {
	if x != nil {
		return x.BuilderPubkey
	}
	return ""
}

func (x *StreamHeaderResponse) GetBuilderExtraData() string {
	if x != nil {
		return x.BuilderExtraData
	}
	return ""
}

func (x *StreamHeaderResponse) GetSendTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SendTime
	}
	return nil
}

func (x *StreamHeaderResponse) GetPaidBlxr() bool {
	if x != nil {
		return x.PaidBlxr
	}
	return false
}

func (x *StreamHeaderResponse) GetRelayReceiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RelayReceiveTime
	}
	return nil
}

func (x *StreamHeaderResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type PreFetchGetPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId       string                 `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Version     string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	SecretToken string                 `protobuf:"bytes,3,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
	Slot        uint64                 `protobuf:"varint,4,opt,name=slot,proto3" json:"slot,omitempty"`
	ParentHash  string                 `protobuf:"bytes,5,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	BlockHash   string                 `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Pubkey      string                 `protobuf:"bytes,7,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	ClientIp    string                 `protobuf:"bytes,8,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	ReceivedAt  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
}

func (x *PreFetchGetPayloadRequest) Reset() {
	*x = PreFetchGetPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreFetchGetPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreFetchGetPayloadRequest) ProtoMessage() {}

func (x *PreFetchGetPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreFetchGetPayloadRequest.ProtoReflect.Descriptor instead.
func (*PreFetchGetPayloadRequest) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{10}
}

func (x *PreFetchGetPayloadRequest) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *PreFetchGetPayloadRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PreFetchGetPayloadRequest) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

func (x *PreFetchGetPayloadRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *PreFetchGetPayloadRequest) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *PreFetchGetPayloadRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *PreFetchGetPayloadRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *PreFetchGetPayloadRequest) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *PreFetchGetPayloadRequest) GetReceivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedAt
	}
	return nil
}

type PreFetchGetPayloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message                   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	VersionedExecutionPayload []byte `protobuf:"bytes,3,opt,name=versioned_execution_payload,json=versionedExecutionPayload,proto3" json:"versioned_execution_payload,omitempty"`
}

func (x *PreFetchGetPayloadResponse) Reset() {
	*x = PreFetchGetPayloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreFetchGetPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreFetchGetPayloadResponse) ProtoMessage() {}

func (x *PreFetchGetPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreFetchGetPayloadResponse.ProtoReflect.Descriptor instead.
func (*PreFetchGetPayloadResponse) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{11}
}

func (x *PreFetchGetPayloadResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PreFetchGetPayloadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PreFetchGetPayloadResponse) GetVersionedExecutionPayload() []byte {
	if x != nil {
		return x.VersionedExecutionPayload
	}
	return nil
}

// SubmitBlock
type SubmitBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                    uint64            `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	BidTrace                   *BidTrace         `protobuf:"bytes,2,opt,name=bidTrace,proto3" json:"bidTrace,omitempty"`
	ExecutionPayload           *ExecutionPayload `protobuf:"bytes,3,opt,name=executionPayload,proto3" json:"executionPayload,omitempty"`
	Signature                  []byte            `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	AuthHeader                 string            `protobuf:"bytes,5,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
	SizeBefore                 uint64            `protobuf:"varint,6,opt,name=size_before,json=sizeBefore,proto3" json:"size_before,omitempty"`
	GetPayloadOnly             bool              `protobuf:"varint,7,opt,name=get_payload_only,json=getPayloadOnly,proto3" json:"get_payload_only,omitempty"`
	BlobsBundle                *BlobsBundle      `protobuf:"bytes,8,opt,name=blobs_bundle,json=blobsBundle,proto3" json:"blobs_bundle,omitempty"`
	SecondValueAuctionEligible bool              `protobuf:"varint,9,opt,name=second_value_auction_eligible,json=secondValueAuctionEligible,proto3" json:"second_value_auction_eligible,omitempty"`
	ProposerMevProtect         bool              `protobuf:"varint,10,opt,name=proposer_mev_protect,json=proposerMevProtect,proto3" json:"proposer_mev_protect,omitempty"`
	SkipOptimism               bool              `protobuf:"varint,11,opt,name=skip_optimism,json=skipOptimism,proto3" json:"skip_optimism,omitempty"`
	ComplianceList             bool              `protobuf:"varint,12,opt,name=compliance_list,json=complianceList,proto3" json:"compliance_list,omitempty"`
}

func (x *SubmitBlockRequest) Reset() {
	*x = SubmitBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBlockRequest) ProtoMessage() {}

func (x *SubmitBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBlockRequest.ProtoReflect.Descriptor instead.
func (*SubmitBlockRequest) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{12}
}

func (x *SubmitBlockRequest) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SubmitBlockRequest) GetBidTrace() *BidTrace {
	if x != nil {
		return x.BidTrace
	}
	return nil
}

func (x *SubmitBlockRequest) GetExecutionPayload() *ExecutionPayload {
	if x != nil {
		return x.ExecutionPayload
	}
	return nil
}

func (x *SubmitBlockRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SubmitBlockRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

func (x *SubmitBlockRequest) GetSizeBefore() uint64 {
	if x != nil {
		return x.SizeBefore
	}
	return 0
}

func (x *SubmitBlockRequest) GetGetPayloadOnly() bool {
	if x != nil {
		return x.GetPayloadOnly
	}
	return false
}

func (x *SubmitBlockRequest) GetBlobsBundle() *BlobsBundle {
	if x != nil {
		return x.BlobsBundle
	}
	return nil
}

func (x *SubmitBlockRequest) GetSecondValueAuctionEligible() bool {
	if x != nil {
		return x.SecondValueAuctionEligible
	}
	return false
}

func (x *SubmitBlockRequest) GetProposerMevProtect() bool {
	if x != nil {
		return x.ProposerMevProtect
	}
	return false
}

func (x *SubmitBlockRequest) GetSkipOptimism() bool {
	if x != nil {
		return x.SkipOptimism
	}
	return false
}

func (x *SubmitBlockRequest) GetComplianceList() bool {
	if x != nil {
		return x.ComplianceList
	}
	return false
}

type SubmitBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SubmitBlockResponse) Reset() {
	*x = SubmitBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBlockResponse) ProtoMessage() {}

func (x *SubmitBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBlockResponse.ProtoReflect.Descriptor instead.
func (*SubmitBlockResponse) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{13}
}

func (x *SubmitBlockResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SubmitBlockResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BidTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot                 uint64 `protobuf:"varint,1,opt,name=Slot,proto3" json:"Slot,omitempty"`
	ParentHash           []byte `protobuf:"bytes,2,opt,name=ParentHash,proto3" json:"ParentHash,omitempty"`
	BlockHash            []byte `protobuf:"bytes,3,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	BuilderPubkey        []byte `protobuf:"bytes,4,opt,name=BuilderPubkey,proto3" json:"BuilderPubkey,omitempty"`
	ProposerPubkey       []byte `protobuf:"bytes,5,opt,name=ProposerPubkey,proto3" json:"ProposerPubkey,omitempty"`
	ProposerFeeRecipient []byte `protobuf:"bytes,6,opt,name=ProposerFeeRecipient,proto3" json:"ProposerFeeRecipient,omitempty"`
	GasLimit             uint64 `protobuf:"varint,7,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	GasUsed              uint64 `protobuf:"varint,8,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	Value                string `protobuf:"bytes,9,opt,name=Value,proto3" json:"Value,omitempty"`
	BlobGasUsed          uint64 `protobuf:"varint,10,opt,name=BlobGasUsed,proto3" json:"BlobGasUsed,omitempty"`
	ExcessBlobGas        uint64 `protobuf:"varint,11,opt,name=ExcessBlobGas,proto3" json:"ExcessBlobGas,omitempty"`
}

func (x *BidTrace) Reset() {
	*x = BidTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidTrace) ProtoMessage() {}

func (x *BidTrace) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidTrace.ProtoReflect.Descriptor instead.
func (*BidTrace) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{14}
}

func (x *BidTrace) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BidTrace) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *BidTrace) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *BidTrace) GetBuilderPubkey() []byte {
	if x != nil {
		return x.BuilderPubkey
	}
	return nil
}

func (x *BidTrace) GetProposerPubkey() []byte {
	if x != nil {
		return x.ProposerPubkey
	}
	return nil
}

func (x *BidTrace) GetProposerFeeRecipient() []byte {
	if x != nil {
		return x.ProposerFeeRecipient
	}
	return nil
}

func (x *BidTrace) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *BidTrace) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *BidTrace) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *BidTrace) GetBlobGasUsed() uint64 {
	if x != nil {
		return x.BlobGasUsed
	}
	return 0
}

func (x *BidTrace) GetExcessBlobGas() uint64 {
	if x != nil {
		return x.ExcessBlobGas
	}
	return 0
}

type Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index          uint64 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	ValidatorIndex uint64 `protobuf:"varint,2,opt,name=ValidatorIndex,proto3" json:"ValidatorIndex,omitempty"`
	Address        []byte `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
	Amount         uint64 `protobuf:"varint,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{15}
}

func (x *Withdrawal) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Withdrawal) GetValidatorIndex() uint64 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *Withdrawal) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Withdrawal) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type BlobsBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commitments [][]byte `protobuf:"bytes,1,rep,name=Commitments,proto3" json:"Commitments,omitempty"`
	Proofs      [][]byte `protobuf:"bytes,2,rep,name=Proofs,proto3" json:"Proofs,omitempty"`
	Blobs       [][]byte `protobuf:"bytes,3,rep,name=Blobs,proto3" json:"Blobs,omitempty"`
}

func (x *BlobsBundle) Reset() {
	*x = BlobsBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobsBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobsBundle) ProtoMessage() {}

func (x *BlobsBundle) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobsBundle.ProtoReflect.Descriptor instead.
func (*BlobsBundle) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{16}
}

func (x *BlobsBundle) GetCommitments() [][]byte {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *BlobsBundle) GetProofs() [][]byte {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *BlobsBundle) GetBlobs() [][]byte {
	if x != nil {
		return x.Blobs
	}
	return nil
}

type ExecutionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash    []byte        `protobuf:"bytes,1,opt,name=ParentHash,proto3" json:"ParentHash,omitempty"`
	StateRoot     []byte        `protobuf:"bytes,2,opt,name=StateRoot,proto3" json:"StateRoot,omitempty"`
	ReceiptsRoot  []byte        `protobuf:"bytes,3,opt,name=ReceiptsRoot,proto3" json:"ReceiptsRoot,omitempty"`
	LogsBloom     []byte        `protobuf:"bytes,4,opt,name=LogsBloom,proto3" json:"LogsBloom,omitempty"`
	PrevRandao    []byte        `protobuf:"bytes,5,opt,name=PrevRandao,proto3" json:"PrevRandao,omitempty"`
	ExtraData     []byte        `protobuf:"bytes,6,opt,name=ExtraData,proto3" json:"ExtraData,omitempty"`
	BaseFeePerGas []byte        `protobuf:"bytes,7,opt,name=BaseFeePerGas,proto3" json:"BaseFeePerGas,omitempty"`
	FeeRecipient  []byte        `protobuf:"bytes,8,opt,name=FeeRecipient,proto3" json:"FeeRecipient,omitempty"`
	BlockHash     []byte        `protobuf:"bytes,9,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	Transactions  []*CompressTx `protobuf:"bytes,10,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	Withdrawals   []*Withdrawal `protobuf:"bytes,11,rep,name=Withdrawals,proto3" json:"Withdrawals,omitempty"`
	BlockNumber   uint64        `protobuf:"varint,12,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	GasLimit      uint64        `protobuf:"varint,13,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	Timestamp     uint64        `protobuf:"varint,14,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	GasUsed       uint64        `protobuf:"varint,15,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	BlobGasUsed   uint64        `protobuf:"varint,16,opt,name=BlobGasUsed,proto3" json:"BlobGasUsed,omitempty"`
	ExcessBlobGas uint64        `protobuf:"varint,17,opt,name=ExcessBlobGas,proto3" json:"ExcessBlobGas,omitempty"`
}

func (x *ExecutionPayload) Reset() {
	*x = ExecutionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionPayload) ProtoMessage() {}

func (x *ExecutionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionPayload.ProtoReflect.Descriptor instead.
func (*ExecutionPayload) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{17}
}

func (x *ExecutionPayload) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *ExecutionPayload) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *ExecutionPayload) GetReceiptsRoot() []byte {
	if x != nil {
		return x.ReceiptsRoot
	}
	return nil
}

func (x *ExecutionPayload) GetLogsBloom() []byte {
	if x != nil {
		return x.LogsBloom
	}
	return nil
}

func (x *ExecutionPayload) GetPrevRandao() []byte {
	if x != nil {
		return x.PrevRandao
	}
	return nil
}

func (x *ExecutionPayload) GetExtraData() []byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *ExecutionPayload) GetBaseFeePerGas() []byte {
	if x != nil {
		return x.BaseFeePerGas
	}
	return nil
}

func (x *ExecutionPayload) GetFeeRecipient() []byte {
	if x != nil {
		return x.FeeRecipient
	}
	return nil
}

func (x *ExecutionPayload) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ExecutionPayload) GetTransactions() []*CompressTx {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ExecutionPayload) GetWithdrawals() []*Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *ExecutionPayload) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ExecutionPayload) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ExecutionPayload) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecutionPayload) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ExecutionPayload) GetBlobGasUsed() uint64 {
	if x != nil {
		return x.BlobGasUsed
	}
	return 0
}

func (x *ExecutionPayload) GetExcessBlobGas() uint64 {
	if x != nil {
		return x.ExcessBlobGas
	}
	return 0
}

type ExecutionPayloadUncompressed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash    []byte         `protobuf:"bytes,1,opt,name=ParentHash,proto3" json:"ParentHash,omitempty"`
	StateRoot     []byte         `protobuf:"bytes,2,opt,name=StateRoot,proto3" json:"StateRoot,omitempty"`
	ReceiptsRoot  []byte         `protobuf:"bytes,3,opt,name=ReceiptsRoot,proto3" json:"ReceiptsRoot,omitempty"`
	LogsBloom     []byte         `protobuf:"bytes,4,opt,name=LogsBloom,proto3" json:"LogsBloom,omitempty"`
	PrevRandao    []byte         `protobuf:"bytes,5,opt,name=PrevRandao,proto3" json:"PrevRandao,omitempty"`
	ExtraData     []byte         `protobuf:"bytes,6,opt,name=ExtraData,proto3" json:"ExtraData,omitempty"`
	BaseFeePerGas []byte         `protobuf:"bytes,7,opt,name=BaseFeePerGas,proto3" json:"BaseFeePerGas,omitempty"`
	FeeRecipient  []byte         `protobuf:"bytes,8,opt,name=FeeRecipient,proto3" json:"FeeRecipient,omitempty"`
	BlockHash     []byte         `protobuf:"bytes,9,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	Transactions  []*Transaction `protobuf:"bytes,10,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	Withdrawals   []*Withdrawal  `protobuf:"bytes,11,rep,name=Withdrawals,proto3" json:"Withdrawals,omitempty"`
	BlockNumber   uint64         `protobuf:"varint,12,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	GasLimit      uint64         `protobuf:"varint,13,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	Timestamp     uint64         `protobuf:"varint,14,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	GasUsed       uint64         `protobuf:"varint,15,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	BlobGasUsed   uint64         `protobuf:"varint,16,opt,name=BlobGasUsed,proto3" json:"BlobGasUsed,omitempty"`
	ExcessBlobGas uint64         `protobuf:"varint,17,opt,name=ExcessBlobGas,proto3" json:"ExcessBlobGas,omitempty"`
}

func (x *ExecutionPayloadUncompressed) Reset() {
	*x = ExecutionPayloadUncompressed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionPayloadUncompressed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionPayloadUncompressed) ProtoMessage() {}

func (x *ExecutionPayloadUncompressed) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionPayloadUncompressed.ProtoReflect.Descriptor instead.
func (*ExecutionPayloadUncompressed) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{18}
}

func (x *ExecutionPayloadUncompressed) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *ExecutionPayloadUncompressed) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *ExecutionPayloadUncompressed) GetReceiptsRoot() []byte {
	if x != nil {
		return x.ReceiptsRoot
	}
	return nil
}

func (x *ExecutionPayloadUncompressed) GetLogsBloom() []byte {
	if x != nil {
		return x.LogsBloom
	}
	return nil
}

func (x *ExecutionPayloadUncompressed) GetPrevRandao() []byte {
	if x != nil {
		return x.PrevRandao
	}
	return nil
}

func (x *ExecutionPayloadUncompressed) GetExtraData() []byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *ExecutionPayloadUncompressed) GetBaseFeePerGas() []byte {
	if x != nil {
		return x.BaseFeePerGas
	}
	return nil
}

func (x *ExecutionPayloadUncompressed) GetFeeRecipient() []byte {
	if x != nil {
		return x.FeeRecipient
	}
	return nil
}

func (x *ExecutionPayloadUncompressed) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ExecutionPayloadUncompressed) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ExecutionPayloadUncompressed) GetWithdrawals() []*Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *ExecutionPayloadUncompressed) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ExecutionPayloadUncompressed) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ExecutionPayloadUncompressed) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecutionPayloadUncompressed) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ExecutionPayloadUncompressed) GetBlobGasUsed() uint64 {
	if x != nil {
		return x.BlobGasUsed
	}
	return 0
}

func (x *ExecutionPayloadUncompressed) GetExcessBlobGas() uint64 {
	if x != nil {
		return x.ExcessBlobGas
	}
	return 0
}

type CompressTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawData []byte `protobuf:"bytes,1,opt,name=rawData,proto3" json:"rawData,omitempty"`
	ShortID uint32 `protobuf:"varint,2,opt,name=shortID,proto3" json:"shortID,omitempty"`
}

func (x *CompressTx) Reset() {
	*x = CompressTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressTx) ProtoMessage() {}

func (x *CompressTx) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressTx.ProtoReflect.Descriptor instead.
func (*CompressTx) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{19}
}

func (x *CompressTx) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *CompressTx) GetShortID() uint32 {
	if x != nil {
		return x.ShortID
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawData []byte `protobuf:"bytes,1,opt,name=rawData,proto3" json:"rawData,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{20}
}

func (x *Transaction) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

type EnrichBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                           string                          `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ExecutionPayloadAndBlobsBundle *ExecutionPayloadAndBlobsBundle `protobuf:"bytes,2,opt,name=executionPayloadAndBlobsBundle,proto3" json:"executionPayloadAndBlobsBundle,omitempty"`
	BidTrace                       *BidTrace                       `protobuf:"bytes,3,opt,name=bidTrace,proto3" json:"bidTrace,omitempty"`
	ParentBeaconRoot               []byte                          `protobuf:"bytes,4,opt,name=parentBeaconRoot,proto3" json:"parentBeaconRoot,omitempty"`
}

func (x *EnrichBlockRequest) Reset() {
	*x = EnrichBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichBlockRequest) ProtoMessage() {}

func (x *EnrichBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichBlockRequest.ProtoReflect.Descriptor instead.
func (*EnrichBlockRequest) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{21}
}

func (x *EnrichBlockRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *EnrichBlockRequest) GetExecutionPayloadAndBlobsBundle() *ExecutionPayloadAndBlobsBundle {
	if x != nil {
		return x.ExecutionPayloadAndBlobsBundle
	}
	return nil
}

func (x *EnrichBlockRequest) GetBidTrace() *BidTrace {
	if x != nil {
		return x.BidTrace
	}
	return nil
}

func (x *EnrichBlockRequest) GetParentBeaconRoot() []byte {
	if x != nil {
		return x.ParentBeaconRoot
	}
	return nil
}

type ExecutionPayloadAndBlobsBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionPayload *ExecutionPayloadUncompressed `protobuf:"bytes,1,opt,name=executionPayload,proto3" json:"executionPayload,omitempty"`
	BlobsBundle      *BlobsBundle                  `protobuf:"bytes,2,opt,name=blobsBundle,proto3" json:"blobsBundle,omitempty"`
}

func (x *ExecutionPayloadAndBlobsBundle) Reset() {
	*x = ExecutionPayloadAndBlobsBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionPayloadAndBlobsBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionPayloadAndBlobsBundle) ProtoMessage() {}

func (x *ExecutionPayloadAndBlobsBundle) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionPayloadAndBlobsBundle.ProtoReflect.Descriptor instead.
func (*ExecutionPayloadAndBlobsBundle) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{22}
}

func (x *ExecutionPayloadAndBlobsBundle) GetExecutionPayload() *ExecutionPayloadUncompressed {
	if x != nil {
		return x.ExecutionPayload
	}
	return nil
}

func (x *ExecutionPayloadAndBlobsBundle) GetBlobsBundle() *BlobsBundle {
	if x != nil {
		return x.BlobsBundle
	}
	return nil
}

type EnrichBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                   string                  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ExecutionPayloadHeader *ExecutionPayloadHeader `protobuf:"bytes,2,opt,name=executionPayloadHeader,proto3" json:"executionPayloadHeader,omitempty"`
	KzgCommitment          [][]byte                `protobuf:"bytes,3,rep,name=kzgCommitment,proto3" json:"kzgCommitment,omitempty"`
	Value                  uint64                  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EnrichBlockResponse) Reset() {
	*x = EnrichBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichBlockResponse) ProtoMessage() {}

func (x *EnrichBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichBlockResponse.ProtoReflect.Descriptor instead.
func (*EnrichBlockResponse) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{23}
}

func (x *EnrichBlockResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *EnrichBlockResponse) GetExecutionPayloadHeader() *ExecutionPayloadHeader {
	if x != nil {
		return x.ExecutionPayloadHeader
	}
	return nil
}

func (x *EnrichBlockResponse) GetKzgCommitment() [][]byte {
	if x != nil {
		return x.KzgCommitment
	}
	return nil
}

func (x *EnrichBlockResponse) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ExecutionPayloadHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash       []byte `protobuf:"bytes,1,opt,name=ParentHash,proto3" json:"ParentHash,omitempty"`
	StateRoot        []byte `protobuf:"bytes,2,opt,name=StateRoot,proto3" json:"StateRoot,omitempty"`
	ReceiptsRoot     []byte `protobuf:"bytes,3,opt,name=ReceiptsRoot,proto3" json:"ReceiptsRoot,omitempty"`
	LogsBloom        []byte `protobuf:"bytes,4,opt,name=LogsBloom,proto3" json:"LogsBloom,omitempty"`
	PrevRandao       []byte `protobuf:"bytes,5,opt,name=PrevRandao,proto3" json:"PrevRandao,omitempty"`
	ExtraData        []byte `protobuf:"bytes,6,opt,name=ExtraData,proto3" json:"ExtraData,omitempty"`
	BaseFeePerGas    []byte `protobuf:"bytes,7,opt,name=BaseFeePerGas,proto3" json:"BaseFeePerGas,omitempty"`
	FeeRecipient     []byte `protobuf:"bytes,8,opt,name=FeeRecipient,proto3" json:"FeeRecipient,omitempty"`
	BlockHash        []byte `protobuf:"bytes,9,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	TransactionsRoot []byte `protobuf:"bytes,10,opt,name=TransactionsRoot,proto3" json:"TransactionsRoot,omitempty"`
	WithdrawalsRoot  []byte `protobuf:"bytes,11,opt,name=WithdrawalsRoot,proto3" json:"WithdrawalsRoot,omitempty"`
	BlockNumber      uint64 `protobuf:"varint,12,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	GasLimit         uint64 `protobuf:"varint,13,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	Timestamp        uint64 `protobuf:"varint,14,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	GasUsed          uint64 `protobuf:"varint,15,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	BlobGasUsed      uint64 `protobuf:"varint,16,opt,name=BlobGasUsed,proto3" json:"BlobGasUsed,omitempty"`
	ExcessBlobGas    uint64 `protobuf:"varint,17,opt,name=ExcessBlobGas,proto3" json:"ExcessBlobGas,omitempty"`
}

func (x *ExecutionPayloadHeader) Reset() {
	*x = ExecutionPayloadHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionPayloadHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionPayloadHeader) ProtoMessage() {}

func (x *ExecutionPayloadHeader) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionPayloadHeader.ProtoReflect.Descriptor instead.
func (*ExecutionPayloadHeader) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{24}
}

func (x *ExecutionPayloadHeader) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetReceiptsRoot() []byte {
	if x != nil {
		return x.ReceiptsRoot
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetLogsBloom() []byte {
	if x != nil {
		return x.LogsBloom
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetPrevRandao() []byte {
	if x != nil {
		return x.PrevRandao
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetExtraData() []byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetBaseFeePerGas() []byte {
	if x != nil {
		return x.BaseFeePerGas
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetFeeRecipient() []byte {
	if x != nil {
		return x.FeeRecipient
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetTransactionsRoot() []byte {
	if x != nil {
		return x.TransactionsRoot
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetWithdrawalsRoot() []byte {
	if x != nil {
		return x.WithdrawalsRoot
	}
	return nil
}

func (x *ExecutionPayloadHeader) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ExecutionPayloadHeader) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ExecutionPayloadHeader) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecutionPayloadHeader) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ExecutionPayloadHeader) GetBlobGasUsed() uint64 {
	if x != nil {
		return x.BlobGasUsed
	}
	return 0
}

func (x *ExecutionPayloadHeader) GetExcessBlobGas() uint64 {
	if x != nil {
		return x.ExcessBlobGas
	}
	return 0
}

type GetEnrichedPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   []byte `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *GetEnrichedPayloadRequest) Reset() {
	*x = GetEnrichedPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blxr_mev_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnrichedPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnrichedPayloadRequest) ProtoMessage() {}

func (x *GetEnrichedPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blxr_mev_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnrichedPayloadRequest.ProtoReflect.Descriptor instead.
func (*GetEnrichedPayloadRequest) Descriptor() ([]byte, []int) {
	return file_blxr_mev_proto_rawDescGZIP(), []int{25}
}

func (x *GetEnrichedPayloadRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GetEnrichedPayloadRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_blxr_mev_proto protoreflect.FileDescriptor

var file_blxr_mev_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x6c, 0x78, 0x72, 0x2d, 0x6d, 0x65, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9c, 0x03, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x76, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x76, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x6d,
	0x22, 0x73, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x74, 0x74,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7a, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x94, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x74,
	0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xe0, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3e, 0x0a, 0x1b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe3, 0x03, 0x0a, 0x14, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x37, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x62, 0x6c, 0x78, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x61,
	0x69, 0x64, 0x42, 0x6c, 0x78, 0x72, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xb5, 0x02, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x71, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x65, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x92, 0x04, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x42, 0x69, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x52, 0x08, 0x62, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x10,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x6c,
	0x6f, 0x62, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x73,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x76, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x76, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x6d,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x13, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf2,
	0x02, 0x0a, 0x08, 0x42, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42,
	0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62,
	0x47, 0x61, 0x73, 0x22, 0x7c, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x5d, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6c,
	0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x62, 0x73,
	0x22, 0xd6, 0x04, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x73, 0x42,
	0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x73,
	0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e,
	0x64, 0x61, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x52,
	0x61, 0x6e, 0x64, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65,
	0x72, 0x47, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x42, 0x61, 0x73, 0x65,
	0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x0c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x78, 0x52, 0x0c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x0b,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f,
	0x62, 0x47, 0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x45, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x22, 0xe3, 0x04, 0x0a, 0x1c, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x4c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72,
	0x65, 0x76, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x50, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65,
	0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x30, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x62, 0x47,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c,
	0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x22,
	0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49,
	0x44, 0x22, 0x27, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x1e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x62,
	0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x1e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x25,
	0x0a, 0x08, 0x62, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x42, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x08, 0x62, 0x69, 0x64,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x6f, 0x6f,
	0x74, 0x22, 0x9b, 0x01, 0x0a, 0x1e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x10, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2e, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0xb6, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x6b, 0x7a, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0d, 0x6b, 0x7a, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd2, 0x04, 0x0a, 0x16, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f,
	0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x6c,
	0x6f, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x64, 0x61,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e,
	0x64, 0x61, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47,
	0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65,
	0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x46,
	0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x62,
	0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x22, 0x53, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x32, 0xf5, 0x03, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3a, 0x0a, 0x0b,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x50, 0x72, 0x65,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1a, 0x2e, 0x50, 0x72, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x50, 0x72,
	0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa1, 0x01, 0x0a, 0x08, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x11, 0x45, 0x6e, 0x72, 0x69, 0x63,
	0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x25,
	0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x6f,
	0x58, 0x6f, 0x75, 0x74, 0x65, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2d, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blxr_mev_proto_rawDescOnce sync.Once
	file_blxr_mev_proto_rawDescData = file_blxr_mev_proto_rawDesc
)

func file_blxr_mev_proto_rawDescGZIP() []byte {
	file_blxr_mev_proto_rawDescOnce.Do(func() {
		file_blxr_mev_proto_rawDescData = protoimpl.X.CompressGZIP(file_blxr_mev_proto_rawDescData)
	})
	return file_blxr_mev_proto_rawDescData
}

var file_blxr_mev_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_blxr_mev_proto_goTypes = []interface{}{
	(*RegisterValidatorRequest)(nil),         // 0: RegisterValidatorRequest
	(*RegisterValidatorResponse)(nil),        // 1: RegisterValidatorResponse
	(*GetValidatorRegistrationRequest)(nil),  // 2: GetValidatorRegistrationRequest
	(*GetValidatorRegistrationResponse)(nil), // 3: GetValidatorRegistrationResponse
	(*GetHeaderRequest)(nil),                 // 4: GetHeaderRequest
	(*GetHeaderResponse)(nil),                // 5: GetHeaderResponse
	(*GetPayloadRequest)(nil),                // 6: GetPayloadRequest
	(*GetPayloadResponse)(nil),               // 7: GetPayloadResponse
	(*StreamHeaderRequest)(nil),              // 8: StreamHeaderRequest
	(*StreamHeaderResponse)(nil),             // 9: StreamHeaderResponse
	(*PreFetchGetPayloadRequest)(nil),        // 10: PreFetchGetPayloadRequest
	(*PreFetchGetPayloadResponse)(nil),       // 11: PreFetchGetPayloadResponse
	(*SubmitBlockRequest)(nil),               // 12: SubmitBlockRequest
	(*SubmitBlockResponse)(nil),              // 13: SubmitBlockResponse
	(*BidTrace)(nil),                         // 14: BidTrace
	(*Withdrawal)(nil),                       // 15: Withdrawal
	(*BlobsBundle)(nil),                      // 16: BlobsBundle
	(*ExecutionPayload)(nil),                 // 17: ExecutionPayload
	(*ExecutionPayloadUncompressed)(nil),     // 18: ExecutionPayloadUncompressed
	(*CompressTx)(nil),                       // 19: compressTx
	(*Transaction)(nil),                      // 20: Transaction
	(*EnrichBlockRequest)(nil),               // 21: EnrichBlockRequest
	(*ExecutionPayloadAndBlobsBundle)(nil),   // 22: ExecutionPayloadAndBlobsBundle
	(*EnrichBlockResponse)(nil),              // 23: EnrichBlockResponse
	(*ExecutionPayloadHeader)(nil),           // 24: ExecutionPayloadHeader
	(*GetEnrichedPayloadRequest)(nil),        // 25: GetEnrichedPayloadRequest
	(*timestamppb.Timestamp)(nil),            // 26: google.protobuf.Timestamp
}
var file_blxr_mev_proto_depIdxs = []int32{
	26, // 0: RegisterValidatorRequest.received_at:type_name -> google.protobuf.Timestamp
	26, // 1: GetPayloadRequest.received_at:type_name -> google.protobuf.Timestamp
	26, // 2: StreamHeaderResponse.send_time:type_name -> google.protobuf.Timestamp
	26, // 3: StreamHeaderResponse.relay_receive_time:type_name -> google.protobuf.Timestamp
	26, // 4: PreFetchGetPayloadRequest.received_at:type_name -> google.protobuf.Timestamp
	14, // 5: SubmitBlockRequest.bidTrace:type_name -> BidTrace
	17, // 6: SubmitBlockRequest.executionPayload:type_name -> ExecutionPayload
	16, // 7: SubmitBlockRequest.blobs_bundle:type_name -> BlobsBundle
	19, // 8: ExecutionPayload.Transactions:type_name -> compressTx
	15, // 9: ExecutionPayload.Withdrawals:type_name -> Withdrawal
	20, // 10: ExecutionPayloadUncompressed.Transactions:type_name -> Transaction
	15, // 11: ExecutionPayloadUncompressed.Withdrawals:type_name -> Withdrawal
	22, // 12: EnrichBlockRequest.executionPayloadAndBlobsBundle:type_name -> ExecutionPayloadAndBlobsBundle
	14, // 13: EnrichBlockRequest.bidTrace:type_name -> BidTrace
	18, // 14: ExecutionPayloadAndBlobsBundle.executionPayload:type_name -> ExecutionPayloadUncompressed
	16, // 15: ExecutionPayloadAndBlobsBundle.blobsBundle:type_name -> BlobsBundle
	24, // 16: EnrichBlockResponse.executionPayloadHeader:type_name -> ExecutionPayloadHeader
	12, // 17: Relay.SubmitBlock:input_type -> SubmitBlockRequest
	0,  // 18: Relay.RegisterValidator:input_type -> RegisterValidatorRequest
	4,  // 19: Relay.GetHeader:input_type -> GetHeaderRequest
	6,  // 20: Relay.GetPayload:input_type -> GetPayloadRequest
	8,  // 21: Relay.StreamHeader:input_type -> StreamHeaderRequest
	2,  // 22: Relay.GetValidatorRegistration:input_type -> GetValidatorRegistrationRequest
	10, // 23: Relay.PreFetchGetPayload:input_type -> PreFetchGetPayloadRequest
	21, // 24: Enricher.EnrichBlockStream:input_type -> EnrichBlockRequest
	25, // 25: Enricher.GetEnrichedPayload:input_type -> GetEnrichedPayloadRequest
	13, // 26: Relay.SubmitBlock:output_type -> SubmitBlockResponse
	1,  // 27: Relay.RegisterValidator:output_type -> RegisterValidatorResponse
	5,  // 28: Relay.GetHeader:output_type -> GetHeaderResponse
	7,  // 29: Relay.GetPayload:output_type -> GetPayloadResponse
	9,  // 30: Relay.StreamHeader:output_type -> StreamHeaderResponse
	3,  // 31: Relay.GetValidatorRegistration:output_type -> GetValidatorRegistrationResponse
	11, // 32: Relay.PreFetchGetPayload:output_type -> PreFetchGetPayloadResponse
	23, // 33: Enricher.EnrichBlockStream:output_type -> EnrichBlockResponse
	22, // 34: Enricher.GetEnrichedPayload:output_type -> ExecutionPayloadAndBlobsBundle
	26, // [26:35] is the sub-list for method output_type
	17, // [17:26] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_blxr_mev_proto_init() }
func file_blxr_mev_proto_init() {
	if File_blxr_mev_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blxr_mev_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterValidatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterValidatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidatorRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPayloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreFetchGetPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreFetchGetPayloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobsBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionPayloadUncompressed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrichBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionPayloadAndBlobsBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrichBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionPayloadHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blxr_mev_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnrichedPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blxr_mev_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_blxr_mev_proto_goTypes,
		DependencyIndexes: file_blxr_mev_proto_depIdxs,
		MessageInfos:      file_blxr_mev_proto_msgTypes,
	}.Build()
	File_blxr_mev_proto = out.File
	file_blxr_mev_proto_rawDesc = nil
	file_blxr_mev_proto_goTypes = nil
	file_blxr_mev_proto_depIdxs = nil
}


